version: "3.8"

services:
  sec-pipeline:
    build: .
    container_name: sec-financial-pipeline
    ports:
      - "8000:8000"
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./config:/app/config
    environment:
      - PYTHONPATH=/app
      - SEC_API_USER_AGENT=SEC-Financial-Pipeline/1.0 (Contact: user@example.com) - Docker Deployment
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Optional: ETL scheduler service
  etl-scheduler:
    build: .
    container_name: sec-etl-scheduler
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./config:/app/config
    environment:
      - PYTHONPATH=/app
    command: >
      sh -c "
        echo '0 6 * * * cd /app && python scripts/run_etl.py daily >> /app/logs/cron.log 2>&1' | crontab - &&
        crond -f
      "
    restart: unless-stopped
    depends_on:
      - sec-pipeline

  # Optional: Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: sec-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - sec-pipeline
    restart: unless-stopped
    profiles:
      - production

  # Optional: Redis for distributed caching (future enhancement)
  redis:
    image: redis:7-alpine
    container_name: sec-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    profiles:
      - redis

volumes:
  redis_data:

networks:
  default:
    name: sec-pipeline-network
